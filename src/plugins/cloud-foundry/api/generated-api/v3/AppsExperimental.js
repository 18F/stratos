/* DO NOT EDIT: This code has been generated by the cf-dotnet-sdk-builder */

(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .factory('cloud-foundry.api.AppsExperimentalService', AppsExperimentalServiceFactory);

  function AppsExperimentalServiceFactory() {
    /* eslint-disable camelcase */
    function AppsExperimentalService($http) {

      this.AssignDropletAsAppsCurrentDroplet = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/current_droplet";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

      this.CreateApp = function (value, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps";
        config.method = 'POST';
        config.data = value;
        $http(config);
      };

      this.DeleteApp = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.FiltersDropletsByStatesAppGuids = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/droplets";
        config.method = 'GET';
        $http(config);
      };

      this.GetProcessFromApp = function (guid, type, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/processes/" + type + "";
        config.method = 'GET';
        $http(config);
      };

      this.GetApp = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "";
        config.method = 'GET';
        $http(config);
      };

      this.GetEnvForApp = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/env";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllApps = function (params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps";
        config.method = 'GET';
        $http(config);
      };

      this.ListAssociatedDroplets = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/droplets";
        config.method = 'GET';
        $http(config);
      };

      this.ListAssociatedPackages = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/packages";
        config.method = 'GET';
        $http(config);
      };

      this.ListAssociatedProcesses = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/processes";
        config.method = 'GET';
        $http(config);
      };

      this.ScalingProcessFromItsApp = function (guid, type, value, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/processes/" + type + "/scale";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

      this.StartingApp = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/start";
        config.method = 'PUT';
        $http(config);
      };

      this.StoppingApp = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/stop";
        config.method = 'PUT';
        $http(config);
      };

      this.TerminatingProcessInstanceFromItsApp = function (guid, type, index, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "/processes/" + type + "/instances/" + index + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.UpdateApp = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "/v3/apps/" + guid + "";
        config.method = 'PATCH';
        config.data = value;
        $http(config);
      };

    }

    return AppsExperimentalService;
    /* eslint-enable camelcase */
  }

})();
