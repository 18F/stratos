/* DO NOT EDIT: This code has been generated by the cf-dotnet-sdk-builder */

(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .run(registerApi);

  registerApi.$inject = [
    '$http',
    'app.api.apiManager'
  ];

  function registerApi($http, apiManager) {
    apiManager.register('cloud-foundry.api.ProcessesExperimental', new ProcessesExperimentalApi($http));
  }

  function ProcessesExperimentalApi($http) {
    this.$http = $http;
  }

  /* eslint-disable camelcase */
  angular.extend(ProcessesExperimentalApi.prototype, {

   /*
    * Get a Process
    * For detailed information, see online documentation at: http://apidocs.cloudfoundry.org/195/processes__experimental_/get_a_process.html
    */
    GetProcess: function (guid, params) {
      var config = {};
      config.params = params;
      config.url = '/api/cf/v3/processes/" + guid + "';
      config.method = 'GET';
      return this.$http(config);
    },

   /*
    * Get Detailed Stats for a Process
    * For detailed information, see online documentation at: http://apidocs.cloudfoundry.org/195/processes__experimental_/get_detailed_stats_for_a_process.html
    */
    GetDetailedStatsForProcess: function (guid, params) {
      var config = {};
      config.params = params;
      config.url = '/api/cf/v3/processes/" + guid + "/stats';
      config.method = 'GET';
      return this.$http(config);
    },

   /*
    * List all Processes
    * For detailed information, see online documentation at: http://apidocs.cloudfoundry.org/195/processes__experimental_/list_all_processes.html
    */
    ListAllProcesses: function (params) {
      var config = {};
      config.params = params;
      config.url = '/api/cf/v3/processes';
      config.method = 'GET';
      return this.$http(config);
    },

   /*
    * Scaling a Process
    * For detailed information, see online documentation at: http://apidocs.cloudfoundry.org/195/processes__experimental_/scaling_a_process.html
    */
    ScalingProcess: function (guid, value, params) {
      var config = {};
      config.params = params;
      config.url = '/api/cf/v3/processes/" + guid + "/scale';
      config.method = 'PUT';
      config.data = value;
      return this.$http(config);
    },

   /*
    * Terminating a Process instance
    * For detailed information, see online documentation at: http://apidocs.cloudfoundry.org/195/processes__experimental_/terminating_a_process_instance.html
    */
    TerminatingProcessInstance: function (guid, index, params) {
      var config = {};
      config.params = params;
      config.url = '/api/cf/v3/processes/" + guid + "/instances/" + index + "';
      config.method = 'DELETE';
      return this.$http(config);
    },

   /*
    * Updating a Process
    * For detailed information, see online documentation at: http://apidocs.cloudfoundry.org/195/processes__experimental_/updating_a_process.html
    */
    UpdateProcess: function (guid, value, params) {
      var config = {};
      config.params = params;
      config.url = '/api/cf/v3/processes/" + guid + "';
      config.method = 'PATCH';
      config.data = value;
      return this.$http(config);
    }

  });
  /* eslint-enable camelcase */

})();
