/* DO NOT EDIT: This code has been generated by the cf-dotnet-sdk-builder */

(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .factory('cloud-foundry.api.PrivateDomainsService', PrivateDomainsServiceFactory);

  function PrivateDomainsServiceFactory() {
    /* eslint-disable camelcase */
    function PrivateDomainsService($http) {

      this.CreatePrivateDomainOwnedByGivenOrganization = function (value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/private_domains";
        config.method = 'POST';
        config.data = value;
        $http(config);
      };

      this.DeletePrivateDomain = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/private_domains/" + guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.FilterPrivateDomainsByName = function (params) {
        var config = {};
        config.params = params;
        config.url = "/v2/private_domains";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllPrivateDomains = function (params) {
        var config = {};
        config.params = params;
        config.url = "/v2/private_domains";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllSharedOrganizationsForPrivateDomain = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/private_domains/" + guid + "/shared_organizations";
        config.method = 'GET';
        $http(config);
      };

      this.RetrievePrivateDomain = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/private_domains/" + guid + "";
        config.method = 'GET';
        $http(config);
      };

    }

    return PrivateDomainsService;
    /* eslint-enable camelcase */
  }

})();
