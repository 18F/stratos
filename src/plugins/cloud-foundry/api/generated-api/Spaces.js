/* DO NOT EDIT: This code has been generated by the cf-dotnet-sdk-builder */

(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .factory('cloud-foundry.api.SpacesService', SpacesServiceFactory);

  function SpacesServiceFactory() {
    /* eslint-disable camelcase */
    function SpacesService($http) {

      this.AssociateAuditorWithSpace = function (guid, auditor_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/auditors/" + auditor_guid + "";
        config.method = 'PUT';
        $http(config);
      };

      this.AssociateAuditorWithSpaceByUsername = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "v2/spaces/" + guid + "/auditors";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

      this.AssociateDeveloperWithSpace = function (guid, developer_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/developers/" + developer_guid + "";
        config.method = 'PUT';
        $http(config);
      };

      this.AssociateDeveloperWithSpaceByUsername = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "v2/spaces/" + guid + "/developers";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

      this.AssociateManagerWithSpace = function (guid, manager_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/managers/" + manager_guid + "";
        config.method = 'PUT';
        $http(config);
      };

      this.AssociateManagerWithSpaceByUsername = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "v2/spaces/" + guid + "/managers";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

      this.AssociateSecurityGroupWithSpace = function (guid, security_group_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/security_groups/" + security_group_guid + "";
        config.method = 'PUT';
        $http(config);
      };

      this.CreateSpace = function (value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces";
        config.method = 'POST';
        config.data = value;
        $http(config);
      };

      this.DeleteSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.DisassociateAuditorWithSpaceByUsername = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "v2/spaces/" + guid + "/auditors";
        config.method = 'DELETE';
        config.data = value;
        $http(config);
      };

      this.DisassociateDeveloperWithSpaceByUsername = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "v2/spaces/" + guid + "/developers";
        config.method = 'DELETE';
        config.data = value;
        $http(config);
      };

      this.DisassociateManagerWithSpaceByUsername = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "v2/spaces/" + guid + "/managers";
        config.method = 'DELETE';
        config.data = value;
        $http(config);
      };

      this.GetSpaceSummary = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/summary";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllAppsForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/apps";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllAuditorsForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/auditors";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllDevelopersForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/developers";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllDomainsForSpaceDeprecated = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/domains";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllEventsForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/events";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllManagersForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/managers";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllRoutesForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/routes";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllSecurityGroupsForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/security_groups";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllServiceInstancesForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/service_instances";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllServicesForSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/services";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllSpaces = function (params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces";
        config.method = 'GET';
        $http(config);
      };

      this.RemoveAuditorFromSpace = function (guid, auditor_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/auditors/" + auditor_guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.RemoveDeveloperFromSpace = function (guid, developer_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/developers/" + developer_guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.RemoveManagerFromSpace = function (guid, manager_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/managers/" + manager_guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.RemoveSecurityGroupFromSpace = function (guid, security_group_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/security_groups/" + security_group_guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.RetrieveSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "";
        config.method = 'GET';
        $http(config);
      };

      this.RetrievingRolesOfAllUsersInSpace = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "/user_roles";
        config.method = 'GET';
        $http(config);
      };

      this.UpdateSpace = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/spaces/" + guid + "";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

    }

    return SpacesService;
    /* eslint-enable camelcase */
  }

})();
