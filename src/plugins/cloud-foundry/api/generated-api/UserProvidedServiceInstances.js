/* DO NOT EDIT: This code has been generated by the cf-dotnet-sdk-builder */

(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .factory('cloud-foundry.api.UserProvidedServiceInstancesService', UserProvidedServiceInstancesServiceFactory);

  function UserProvidedServiceInstancesServiceFactory() {
    /* eslint-disable camelcase */
    function UserProvidedServiceInstancesService($http) {

      this.AssociateRouteWithUserProvidedServiceInstanceExperimental = function (guid, route_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances/" + guid + "/routes/" + route_guid + "";
        config.method = 'PUT';
        $http(config);
      };

      this.CreateUserProvidedServiceInstance = function (value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances";
        config.method = 'POST';
        config.data = value;
        $http(config);
      };

      this.DeleteUserProvidedServiceInstance = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances/" + guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.ListAllRoutesForUserProvidedServiceInstance = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances/" + guid + "/routes";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllServiceBindingsForUserProvidedServiceInstance = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances/" + guid + "/service_bindings";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllUserProvidedServiceInstances = function (params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances";
        config.method = 'GET';
        $http(config);
      };

      this.RemoveRouteFromUserProvidedServiceInstanceExperimental = function (guid, route_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instance/" + guid + "/routes/" + route_guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.RetrieveUserProvidedServiceInstance = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances/" + guid + "";
        config.method = 'GET';
        $http(config);
      };

      this.UpdateUserProvidedServiceInstance = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/user_provided_service_instances/" + guid + "";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

    }

    return UserProvidedServiceInstancesService;
    /* eslint-enable camelcase */
  }

})();
