/* DO NOT EDIT: This code has been generated by the cf-dotnet-sdk-builder */

(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .factory('cloud-foundry.api.DomainsDeprecatedService', DomainsDeprecatedServiceFactory);

  function DomainsDeprecatedServiceFactory() {
    /* eslint-disable camelcase */
    function DomainsDeprecatedService($http) {

      this.CreateDomainOwnedByGivenOrganizationDeprecated = function (value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/domains";
        config.method = 'POST';
        config.data = value;
        $http(config);
      };

      this.CreateSharedDomainDeprecated = function (value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/domains";
        config.method = 'POST';
        config.data = value;
        $http(config);
      };

      this.DeleteDomainDeprecated = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/domains/" + guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.ListAllDomainsDeprecated = function (params) {
        var config = {};
        config.params = params;
        config.url = "/v2/domains";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllSpacesForDomainDeprecated = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/domains/" + guid + "/spaces";
        config.method = 'GET';
        $http(config);
      };

      this.RetrieveDomainDeprecated = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/domains/" + guid + "";
        config.method = 'GET';
        $http(config);
      };

    }

    return DomainsDeprecatedService;
    /* eslint-enable camelcase */
  }

})();
