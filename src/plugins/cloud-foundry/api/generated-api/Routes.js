/* DO NOT EDIT: This code has been generated by the cf-dotnet-sdk-builder */

(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .factory('cloud-foundry.api.RoutesService', RoutesServiceFactory);

  function RoutesServiceFactory() {
    /* eslint-disable camelcase */
    function RoutesService($http) {

      this.AssociateAppWithRoute = function (guid, app_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes/" + guid + "/apps/" + app_guid + "";
        config.method = 'PUT';
        $http(config);
      };

      this.CheckRouteExists = function (domain_guid, host, path, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes/reserved/domain/" + domain_guid + "/host/" + host + "?path=" + path + "";
        config.method = 'GET';
        $http(config);
      };

      this.CreateRoute = function (value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes";
        config.method = 'POST';
        config.data = value;
        $http(config);
      };

      this.DeleteRoute = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes/" + guid + "?recursive=true";
        config.method = 'DELETE';
        $http(config);
      };

      this.ListAllAppsForRoute = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes/" + guid + "/apps";
        config.method = 'GET';
        $http(config);
      };

      this.ListAllRoutes = function (params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes";
        config.method = 'GET';
        $http(config);
      };

      this.RemoveAppFromRoute = function (guid, app_guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes/" + guid + "/apps/" + app_guid + "";
        config.method = 'DELETE';
        $http(config);
      };

      this.RetrieveRoute = function (guid, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes/" + guid + "";
        config.method = 'GET';
        $http(config);
      };

      this.UpdateRoute = function (guid, value, params) {
        var config = {};
        config.params = params;
        config.url = "/v2/routes/" + guid + "";
        config.method = 'PUT';
        config.data = value;
        $http(config);
      };

    }

    return RoutesService;
    /* eslint-enable camelcase */
  }

})();
