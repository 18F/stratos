/* DO NOT EDIT: This code has been generated by swagger-codegen */
(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .run(registerApi);

  registerApi.$inject = [
    '$http',
    'app.api.apiManager'
  ];

  function registerApi($http, apiManager) {
    apiManager.register('cloud-foundry.api.HceContainerApi', new HceContainerApi($http));
  }

  /**
    * @constructor
    * @name HceContainerApi
    * @description For more information on this API, please see:
    * https://github.com/hpcloud/hce-rest-service/blob/master/app/v2/swagger.yml
    * @param {object} $http - the Angular $http service
    * @property {object} $http - the Angular $http service
    * @property {string} baseUrl - the API base URL
    * @property {object} defaultHeaders - the default headers
    */
  function HceContainerApi($http) {
    this.$http = $http;
    this.baseUrl = '/api/ce/v2';
    this.defaultHeaders = {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    };
  }

  angular.extend(HceContainerApi.prototype, {
    /**
     * @name addBuildContainer
     * @description Add a BuildContainer instance.
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    addBuildContainer: function (data, params) {
      var path = this.baseUrl + '/containers/build_containers';

      var config = {
        method: 'POST',
        url: path,
        params: params || {},
        data: data,
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name addImage
     * @description Add a Image instance.
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    addImage: function (data, params) {
      var path = this.baseUrl + '/containers/images';

      var config = {
        method: 'POST',
        url: path,
        params: params || {},
        data: data,
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name addImageRegistry
     * @description Add a ImageRegistry instance.
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    addImageRegistry: function (data, params) {
      var path = this.baseUrl + '/containers/images/registries';

      var config = {
        method: 'POST',
        url: path,
        params: params || {},
        data: data,
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name getBuildContainer
     * @description Get the BuildContainer specified in the request.
     * @param {!number} containerId - The (HCE) item id.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    getBuildContainer: function (containerId, params) {
      var path = this.baseUrl + '/containers/build_containers/{container_id}'
        .replace('{' + 'container_id' + '}', containerId);

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name getBuildContainers
     * @description List BuildContainer instances.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    getBuildContainers: function (params) {
      var path = this.baseUrl + '/containers/build_containers';

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name getImage
     * @description Get the Image specified in the request.
     * @param {!number} imageId - The (HCE) image id.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    getImage: function (imageId, params) {
      var path = this.baseUrl + '/containers/images/{image_id}'
        .replace('{' + 'image_id' + '}', imageId);

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name getImageRegistries
     * @description List ImageRegistry instances.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    getImageRegistries: function (params) {
      var path = this.baseUrl + '/containers/images/registries';

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name getImageRegistry
     * @description Get the ImageRegistry specified in the request.
     * @param {!number} registryId - The (HCE) item id.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    getImageRegistry: function (registryId, params) {
      var path = this.baseUrl + '/containers/images/registries/{registry_id}'
        .replace('{' + 'registry_id' + '}', registryId);

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name getImageTypes
     * @description Enumeration of Container image types, e.g. &#x60;DOCKER&#x60;, &#x60;ROCKET&#x60;, etc.\n
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    getImageTypes: function (params) {
      var path = this.baseUrl + '/containers/images/types';

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name getImages
     * @description List Image instances.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    getImages: function (params) {
      var path = this.baseUrl + '/containers/images';

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name removeBuildContainer
     * @description Remove (unregister) the specified BuildContainer.
     * @param {!number} containerId - The (HCE) BuildContainer id.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    removeBuildContainer: function (containerId, params) {
      var path = this.baseUrl + '/containers/build_containers/{container_id}'
        .replace('{' + 'container_id' + '}', containerId);

      var config = {
        method: 'DELETE',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name removeImage
     * @description Remove (unregister) the specified Image.
     * @param {!number} imageId - The (HCE) Image id.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    removeImage: function (imageId, params) {
      var path = this.baseUrl + '/containers/images/{image_id}'
        .replace('{' + 'image_id' + '}', imageId);

      var config = {
        method: 'DELETE',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name removeImageRegistry
     * @description Remove (unregister) the specified ImageRegistry.
     * @param {!number} registryId - The (HCE) ImageRegistry id.
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    removeImageRegistry: function (registryId, params) {
      var path = this.baseUrl + '/containers/images/registries/{registry_id}'
        .replace('{' + 'registry_id' + '}', registryId);

      var config = {
        method: 'DELETE',
        url: path,
        params: params || {},
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name updateBuildContainer
     * @description Update the specified build container
     * @param {!number} containerId - BuildContainer id.
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    updateBuildContainer: function (containerId, data, params) {
      var path = this.baseUrl + '/containers/build_containers/{container_id}'
        .replace('{' + 'container_id' + '}', containerId);

      var config = {
        method: 'PUT',
        url: path,
        params: params || {},
        data: data,
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name updateImage
     * @description Update the specified container image.
     * @param {!number} imageId - Container image id.
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    updateImage: function (imageId, data, params) {
      var path = this.baseUrl + '/containers/images/{image_id}'
        .replace('{' + 'image_id' + '}', imageId);

      var config = {
        method: 'PUT',
        url: path,
        params: params || {},
        data: data,
        headers: this.defaultHeaders
      };

      return this.$http(config);
    },

    /**
     * @name updateImageRegistry
     * @description Update the specified container registry.
     * @param {!number} registryId - Registry id.
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    updateImageRegistry: function (registryId, data, params) {
      var path = this.baseUrl + '/containers/images/registries/{registry_id}'
        .replace('{' + 'registry_id' + '}', registryId);

      var config = {
        method: 'PUT',
        url: path,
        params: params || {},
        data: data,
        headers: this.defaultHeaders
      };

      return this.$http(config);
    }
  });
})();
