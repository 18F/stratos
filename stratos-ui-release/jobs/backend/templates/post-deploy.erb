#!/bin/bash
set -e


# Check Git is installed
echo "Installing Git and MariaDB Client"
apt-get update
apt-get install -y git mariadb-client

echo "PWD: $PWD"
export GOROOT="/var/vcap/packages/golang/"
export GOPATH="/tmp"
export PATH=$GOROOT/bin:$GOPATH/bin:$PATH

echo "Installing Goose and dependant libraries"
go get bitbucket.org/liamstask/goose/cmd/goose
go get bitbucket.org/liamstask/goose/lib/goose
go get github.com/go-sql-driver/mysql


function execStatement {
    stmt=$1
    echo "Executing: mysql -u <%= p('stratos_ui.backend.mysql_admin_user') %> -h<%= p('stratos_ui.backend.mysql_host') %> -P <%= p('stratos_ui.backend.mysql_port') %> -pxxxxxxxxxxxx -e $stmt"
    mysql -u <%= p('stratos_ui.backend.mysql_admin_user') %> -h<%= p('stratos_ui.backend.mysql_host') %> -P <%= p('stratos_ui.backend.mysql_port') %> -p<%= p('stratos_ui.backend.mysql_admin_password') %> -e $stmt

}

stratosDbExists=$(execStatement  "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$DB_DATABASE_NAME';")
DBCONF_KEY=mariadb-k8s

# Create DB if neccessary
if [ -z "$stratosDbExists" ] ; then
    echo "Creating database $DB_DATABASE_NAME"
    execStatement "CREATE DATABASE \"$DB_DATABASE_NAME\";"
    echo "Creating user $DB_USER"
    execStatement "CREATE USER $DB_USER IDENTIFIED BY '$DB_PASSWORD';"
    
    echo "Granting privs for $DB_DATABASE_NAME to $DB_USER"
    execStatement "GRANT ALL PRIVILEGES ON DATABASE \"$DB_DATABASE_NAME\" TO $DB_USER;"
    DBCONF_KEY=mariadb-k8s
else
    echo "$DB_DATABASE_NAME already exists"
fi

# Migrate the database if necessary
echo "Checking database to see if migration is necessary."

echo "DBCONFIG: $DBCONF_KEY"
echo "Connection string: $DB_USER:$DB_PASSWORD@tcp(<%= p('stratos_ui.backend.mysql_host') %>:<%= p('stratos_ui.backend.mysql_port') %>)/$DB_DATABASE_NAME?parseTime=true"
# Check the version
echo "Checking database version."
goose --env=$DBCONF_KEY dbversion

# Check the status
echo "Checking database status."
goose --env=$DBCONF_KEY status

# Run migrations
echo "Attempting database migrations."
goose --env=$DBCONF_KEY up

# CHeck the status
echo "Checking database status."
goose --env=$DBCONF_KEY status

# Check the version
echo "Checking database version."
goose --env=$DBCONF_KEY dbversion

echo "Database operation(s) complete."


# Check if Upgrade Lock file exists
if [ ! -f "/$UPGRADE_VOLUME/$UPGRADE_LOCK_FILENAME" ]; then
  exit 1
fi
# Remove the lock file on the shared volume
echo "Removing the $UPGRADE_LOCK_FILENAME file from the shared upgrade volume $UPGRADE_VOLUME."
rm /$UPGRADE_VOLUME/$UPGRADE_LOCK_FILENAME || true

echo "Removed the upgrade lock file."

# If DO_NOT_QUIT is set, don't quit script
# This is only used in toy kubernetes deployments with no shared volume 
if [ "${DO_NOT_QUIT:-false}" = "false" ]; then
    echo "Running in shared volume mode, exiting..."
    exit 0
else
    echo "Running in 'DO NOT QUIT' mode"
    while true; do echo ''; sleep 5; done   
fi